#include<bits/stdc++.h>

using namespace std;

void insertionSort(int arr[], int n)
{
	for(int i=1; i<n; i++)
	{
		int key = arr[i];
		int j = i - 1;

		while(arr[j]>key && j>=0)
		{
			arr[j+1] = arr[j];
			j--;
		}
		arr[j+1] = key;
	}
}

void swap(int *a, int *b)
{
	int temp;
	temp = *b;
	*b = *a;
	*a = temp;
}

void printArray(int arr[], int n)
{
	for(int i=0; i<n; i++)
	{
		cout << arr[i] << "  ";
		//printf("%d ", arr[i]);
	}
	cout << endl;
	//printf("\n");
}

int binary_Search(int arr[], int n, int skey)
{
    int low = 0, high = n-1;
    int mid;

    while(low<=high)
    {
        mid = (low+high)/2;
        if(arr[mid] == skey) return mid;
        else if(skey>arr[mid]) low = mid+1;
        else high = mid-1;
    }

    return -1;
}

int binary_Search_recursion(int arr[], int low, int high, int skey)
{
    if(low<=high)
    {
        int mid = (low+high)/2;

        if(arr[mid] == skey) return mid;
        else if(skey>arr[mid]) return binary_Search_recursion(arr, mid+1, high, skey);
        else return binary_Search_recursion(arr, low, mid-1, skey);
    }

    return -1;
}

int linear_search(int arr[], int n, int skey)
{
    for(int i=0; i<n; i++)
    {
        if(arr[i]==skey) return i;
    }
    return -1;
}

int main()
{
    int arr[] = {2, 1, -5, 7, -10, 3};
    int n = sizeof(arr) / sizeof(arr[0]);
    int skey = 7;

    printArray(arr, n);
    insertionSort(arr, n);
    printArray(arr, n);
    //int res_idx = linear_search(arr, n, skey);
    int res_idx = binary_Search_recursion(arr, 0, n-1, skey);
    cout << "Index: " << res_idx << endl;
    if(res_idx==-1) cout<<"Not Found!"<<endl;
    else cout <<"Found " << arr[res_idx] << endl;
    return 0;
}
